#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: scc-workshop
spec:
  title: Supply Chain Choreographer
  description: A workshop that demonstrates all the capabilities Supply Chain Choreographer provides.
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 200m
  url: https://github.com/tsalm-pivotal/tap-cartographer-workshop
  content:
    image: #@ "{}/tap-workshop/tap-overview-workshop:latest".format(data.values.container_registry.hostname)
    files: #@ "github.com/{}/tap-cartographer-workshop/workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
      editor:
        enabled: true
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    - name: CONTAINER_REGISTRY_HOSTNAME
      value: #@ data.values.container_registry.hostname
    - name: CONTAINER_REGISTRY_REPOSITORY
      value: #@ data.values.container_registry.repository
    - name: GITOPS_REPOSITORY
      value: #@ "{}/$(session_namespace).git".format(data.values.gitea.https_repository_prefix)
    - name: GITOPS_REPOSITORY_USERNAME
      value: #@ data.values.gitea.basic_auth_username
    - name: GITOPS_REPOSITORY_PASSWORD
      value: #@ data.values.gitea.basic_auth_password
    objects:
      # Permissions for tap-sa (Supply Chain)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-default
        rules:
        - apiGroups:
          - timosalm.de
          resources:
          - githubrepositories
          verbs:
          - '*'
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-default
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-permit-deliverable
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: deliverable
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-permit-workload
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: workload
        subjects:
          - kind: ServiceAccount
            name: default
          - kind: ServiceAccount
            name: $(service_account)
      # Permissions for workshop session
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: $(session_namespace)-cluster-resources-reader
        rules:
        - apiGroups: [conventions.apps.tanzu.vmware.com]
          resources: ["clusterpodconventions"]
          verbs: ["get", "watch", "list"]
        - apiGroups: [apiextensions.k8s.io]
          resources: [customresourcedefinitions]
          verbs: ["get", "watch", "list"]
        - apiGroups: [carto.run]
          resources: ["clusterconfigtemplates", "clusterdeliveries", "clusterdeploymenttemplates","clusterimagetemplates", "clusterruntemplates", "clustersourcetemplates", "clustersupplychains", "clustertemplates"]
          verbs: ["*"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: $(session_namespace)-cluster-resources-reader-rb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: $(session_namespace)-cluster-resources-reader
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-session
          namespace: $(session_namespace)
        rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - 'patch'
        - apiGroups: [tekton.dev]
          resources: [tasks, pipelines]
          verbs: ['*']
        - apiGroups: [carto.run]
          resources: [workloads, deliverables]
          verbs: ['*']
        - apiGroups: [source.toolkit.fluxcd.io]
          resources: [gitrepositories]
          verbs: ['*']
        - apiGroups: [kpack.io]
          resources: [images]
          verbs: ['*']
        - apiGroups: ['*']
          resources: ['*']
          verbs: ["get", "watch", "list"]
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-session-rb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-session
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)
      # Install grype
      - apiVersion: packaging.carvel.dev/v1alpha1
        kind: PackageInstall
        metadata:
          name: $(session_namespace)-grype
          namespace: tap-install
        spec:
          serviceAccountName: tap-install-sa
          packageRef:
            refName: grype.scanning.apps.tanzu.vmware.com
            versionSelection:
              constraints: ">=0.0.0"
              prereleases:
                identifiers: [beta, build]
          values:
          - secretRef:
              name: $(session_namespace)-grype-values
      - apiVersion: v1
        kind: Secret
        metadata:
          name: $(session_namespace)-grype-values
          namespace: tap-install
        stringData:
          values.yaml: |
            ---
            namespace: $(session_namespace)
            targetImagePullSecret: registry-credentials

      # Scan policy
      - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
        kind: ScanPolicy
        metadata:
          name: scan-policy
        spec:
          regoFile: |
            package main
      
            # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
            notAllowedSeverities := ["UnknownSeverity"]
            ignoreCves := []
      
            contains(array, elem) = true {
              array[_] = elem
            } else = false { true }
      
            isSafe(match) {
              severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
              some i
              fails := contains(notAllowedSeverities, severities[i])
              not fails
            }
      
            isSafe(match) {
              ignore := contains(ignoreCves, match.id)
              ignore
            }
      
            deny[msg] {
              comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
              some i
              comp := comps[i]
              vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
              some j
              vuln := vulns[j]
              ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
              not isSafe(vuln)
              msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
            }
      - apiVersion: v1
        kind: Secret
        metadata:
          name: registry-credentials
        type: kubernetes.io/dockerconfigjson
        data:
          #@ docker_creds = {"username": data.values.container_registry.username, "password": data.values.container_registry.password}
          .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.container_registry.hostname: docker_creds}}))
      - apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            tekton.dev/git-0: #@ data.values.gitops.host
          name: git-https
        type: kubernetes.io/basic-auth
        stringData:
          username: #@ data.values.gitops.username
          password: #@ data.values.gitops.password
      - apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        metadata:
          name: developer-defined-tekton-pipeline
          labels:
            apps.tanzu.vmware.com/pipeline: test     # (!) required
        spec:
          params:
            - name: source-url                       # (!) required
            - name: source-revision                  # (!) required
            - name: source-sub-path
              default: "."
          tasks:
            - name: test
              params:
                - name: source-url
                  value: $(params.source-url)
                - name: source-revision
                  value: $(params.source-revision)
                - name: source-sub-path
                  value: $(params.source-sub-path)
              taskSpec:
                params:
                  - name: source-url
                  - name: source-revision
                  - name: source-sub-path
                steps:
                  - name: test
                    image: gradle
                    script: |-
                      cd `mktemp -d`
  
                      wget -qO- $(params.source-url) | tar xvz -m
                      cd $(params.source-sub-path)
                      ./mvnw test
      - apiVersion: carto.run/v1alpha1
        kind: Workload
        metadata:
          labels:
            app.kubernetes.io/part-of: ootb-sc-demo
            apps.tanzu.vmware.com/has-tests: "true"
            apps.tanzu.vmware.com/workload-type: web
          name: ootb-sc-demo
        spec:
          source:
            git:
              ref:
                branch: main
              url: https://github.com/timosalm/spring-boot-hello-world.git